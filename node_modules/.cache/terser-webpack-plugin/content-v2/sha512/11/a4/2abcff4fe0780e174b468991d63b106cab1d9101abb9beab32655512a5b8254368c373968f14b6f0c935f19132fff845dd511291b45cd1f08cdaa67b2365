{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{1492:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625121210341.c7cc54a2.png\"},1493:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625121436867.652a28b2.png\"},1494:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625123756722.c87ff7a4.png\"},1495:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625124023657.f5a53798.png\"},1496:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625124330383.8594d615.png\"},1497:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625124446949.be28db8f.png\"},1498:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625174835125.31dcff49.png\"},1499:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625195838857.d6a784cb.png\"},1500:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625195905386.3cae09ca.png\"},1501:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625200346854.cc6f95a8.png\"},1502:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625220842755.8ce7dcf5.png\"},1503:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625220959048.4f9e0af8.png\"},1504:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625221534369.bbfac4bc.png\"},1505:function(s,a,t){s.exports=t.p+\"assets/img/image-20220625221653566.db313567.png\"},1506:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626102833872.2496c125.png\"},1507:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626103134910.7adb14b5.png\"},1508:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626104521931.09f11f4d.png\"},1509:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626103257559.02104d2f.png\"},1510:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626111833261.7ef25796.png\"},1511:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626112009847.4cd9b424.png\"},1512:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626112030600.764a249a.png\"},1513:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626114456095.3138dbb4.png\"},1514:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626114518047.e7724ce0.png\"},1515:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626114530374.b4afe548.png\"},1516:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626114542116.825d14f0.png\"},1517:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626160644790.a17725e1.png\"},1518:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626160827986.7caad78e.png\"},1519:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626161615079.b6cbcbed.png\"},1520:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626163109893.547123eb.png\"},1521:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626163004244.fabcb76a.png\"},1522:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626165411749.ddb3c129.png\"},1523:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626165858998.6a4e2803.png\"},1524:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626172251068.540ae2b7.png\"},1525:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626172317010.1a814abc.png\"},1526:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626172334668.dea22898.png\"},1527:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626172351365.d26e2796.png\"},1528:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626172406556.63742dfc.png\"},1529:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626172422439.535855a5.png\"},1530:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626172436722.d38024e5.png\"},1531:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626172451937.c26bcca9.png\"},1532:function(s,a,t){s.exports=t.p+\"assets/img/image-20220626172506516.71869329.png\"},1785:function(s,a,t){\"use strict\";t.r(a);var n=t(1),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"一-jvm的生命周期\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一-jvm的生命周期\"}},[s._v(\"#\")]),s._v(\" 一：JVM的生命周期\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_1-虚拟机的启动\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-虚拟机的启动\"}},[s._v(\"#\")]),s._v(\" 1：虚拟机的启动\")]),s._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",[a(\"code\",[s._v(\"Java虚拟机的启动是通过引导类加载器(bootstrap class loader)创建个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的。\\n\")])])]),a(\"h3\",{attrs:{id:\"_2-虚拟机的执行\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-虚拟机的执行\"}},[s._v(\"#\")]),s._v(\" 2：虚拟机的执行\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"一个运行中的Java虚拟机有着一个清晰的任务:执行Java程序。\")]),s._v(\" \"),a(\"li\",[s._v(\"程序开始执行时他才运行，程序结束时他就停止。\")]),s._v(\" \"),a(\"li\",[s._v(\"执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程。\")])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_3-虚拟机的退出\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-虚拟机的退出\"}},[s._v(\"#\")]),s._v(\" 3：虚拟机的退出\")]),s._v(\" \"),a(\"p\",[s._v(\"​    有如下的几种情况:\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"​\\t\\t程序正常执行结束\")]),s._v(\" \"),a(\"li\",[s._v(\"​\\t\\t程序在执行过程中遇到了异常或错误而异常终止\")]),s._v(\" \"),a(\"li\",[s._v(\"​\\t\\t由于操作系统出现错误而导致Java虚拟机进程终止\")]),s._v(\" \"),a(\"li\",[s._v(\"​\\t\\t某线程调用Runtime类或System类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。\")]),s._v(\" \"),a(\"li\",[s._v(\"​\\t\\t除此之外，JNI(JavaNative Interface)规范描述了用JNIInvocation API来加载或卸载Java虚拟机时，Java虚拟机的退出情况。\")])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"二-jvm内存模型\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二-jvm内存模型\"}},[s._v(\"#\")]),s._v(\" 二：JVM内存模型\")]),s._v(\" \"),a(\"p\",[s._v(\"​\\t\\t内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了Java在这行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。\")]),s._v(\" \"),a(\"p\",[s._v(\"简图：\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"150%\"},attrs:{src:t(1492),alt:\"image-20220625121210341\"}}),s._v(\" \"),a(\"p\",[s._v(\"详细图：\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1493),alt:\"image-20220625121436867\"}}),s._v(\" \"),a(\"h2\",{attrs:{id:\"三-类加载器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三-类加载器\"}},[s._v(\"#\")]),s._v(\" 三：类加载器\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_1-类加载器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-类加载器\"}},[s._v(\"#\")]),s._v(\" 1：类加载器\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_1-概述类加载器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-概述类加载器\"}},[s._v(\"#\")]),s._v(\" （1）概述类加载器\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1494),alt:\"image-20220625123756722\"}})]),s._v(\" \"),a(\"p\",[s._v(\"类加载器子系统负责从文件系统或者网络中加载Class文件，class文件开头有特定的文件标识。\")]),s._v(\" \"),a(\"p\",[s._v(\"ClassLoader只负责class文件的加载，至于它是否可以运行，则由ExcutionEngine（也就是执行引擎）决定。\")]),s._v(\" \"),a(\"p\",[s._v(\"加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串和数字常量（这部分信息是Class文件中常量池部分的内存映射）\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_2-类加载器classloader角色\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-类加载器classloader角色\"}},[s._v(\"#\")]),s._v(\" （2）类加载器ClassLoader角色\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:t(1495),alt:\"image-20220625124023657\"}}),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"class file 存在于本地磁盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出N个一模一样的的实例。\")]),s._v(\" \"),a(\"li\",[s._v(\"class file 加载到JVM中，被称为DNA元数据模板，放在方法区。\")]),s._v(\" \"),a(\"li\",[s._v(\"在.class文件—》 JVM —》 最终成为元数据模块，此过程就要一个运输工具（类装载器Class Loader），扮演一个快递员的角色\")])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_2-类的加载过程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-类的加载过程\"}},[s._v(\"#\")]),s._v(\" 2：类的加载过程\")]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1496),alt:\"image-20220625124330383\"}})]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1497),alt:\"image-20220625124446949\"}})]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_1-加载\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-加载\"}},[s._v(\"#\")]),s._v(\" （1）加载\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[s._v(\"通过一个类的全限定名获取定义此类的二进制字节流\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口\")])])]),s._v(\" \"),a(\"p\",[s._v(\"补充：加载.class文件的方式\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[s._v(\"从本地系统中直接加载\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"通过网络获取，典型场景：Web Applet\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"从zip压缩包中获取，打包好的jar、war格式的基础\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"运行时计算生成，使用最多的是：动态代理技术\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"由其他文件生成，典型场景：JSP应用\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"从专有数据库中提取.class文件，比较少见\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"从加密文件中获取，典型的防Class文件被反编译后的保护措施\")])])]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_2-链接\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-链接\"}},[s._v(\"#\")]),s._v(\" （2）链接\")]),s._v(\" \"),a(\"h5\",{attrs:{id:\"_1-验证-verify\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-验证-verify\"}},[s._v(\"#\")]),s._v(\" ①：验证(Verify):\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[s._v(\"目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"主要包括四种验证：\")])])]),s._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[s._v(\"文件格式验证：主要按照Class文件16进制背后的秘密文章中的阐述的格式，严格的进行校验。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"元数据验证：主要是语义校验，保证不存在不符合Java语言规范的元数据信息，如：没有父类，继承了final类，接口的非抽象类实现没有完整实现方法等。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"字节码验证：主要对数据流和控制流进行分析，确定成行语义是否合法，符合逻辑。\")]),s._v(\" \"),a(\"p\",[s._v(\"不合法的例子：\")]),s._v(\" \"),a(\"p\",[s._v(\"操作数栈放置了int类型数据，却当成long类型使用；\")]),s._v(\" \"),a(\"p\",[s._v(\"把父类对象赋值给了子类数据类型；\")]),s._v(\" \"),a(\"p\",[s._v(\". . . . . .\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"符号引用验证：解析阶段发生的验证，当把符号引用转化为直接引用的时候进行验证。这主要是对类自身以外的信息进行匹配性校验。主要包括：\")]),s._v(\" \"),a(\"p\",[s._v(\"全限定名是否可以找到对应的类；\")]),s._v(\" \"),a(\"p\",[s._v(\"指定类是否存在符合方法的字段描述符以及简单名称所描述的方法和字段；\")]),s._v(\" \"),a(\"p\",[s._v(\"校验类，字段和方法的可见性；\")]),s._v(\" \"),a(\"p\",[s._v(\". . . . . .\")])])]),s._v(\" \"),a(\"h5\",{attrs:{id:\"_2-准备-prepare\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-准备-prepare\"}},[s._v(\"#\")]),s._v(\" ②：准备(Prepare)\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"为类变量分配内存并设置该类变量的默认初始值，即零值。\")]),s._v(\" \"),a(\"li\",[s._v(\"这里不包含用final修饰的static，因为final在编译的时候就分配了，准备阶段会显示初始化；\")]),s._v(\" \"),a(\"li\",[s._v(\"这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中\")])]),s._v(\" \"),a(\"h5\",{attrs:{id:\"_3-解析-resolve\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-解析-resolve\"}},[s._v(\"#\")]),s._v(\" ③：解析(Resolve)\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"将常量池内的符号引用转为直接引用的过程。\")]),s._v(\" \"),a(\"li\",[s._v(\"事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。\")]),s._v(\" \"),a(\"li\",[s._v(\"符号引用就是一组符号来描述所引用的目标。符号引用字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。\")]),s._v(\" \"),a(\"li\",[s._v(\"解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等；对应常量池中的CONDTANT_Class_info、CONSTANT_Fielder_info、CONSTANT_Methodref_info等。\")])]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_3-初始化\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-初始化\"}},[s._v(\"#\")]),s._v(\" （3）初始化\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[s._v(\"初始化阶段就是执行类构造器方法和< clinit >()的过程。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"构造器方法中指令按语句在源文 件中出现的顺序来执行。\")]),s._v(\" \"),a(\"p\",[s._v(\"< clinit >()不同于类的构造器(< init >)是类加载的时候执行的比如静态代码块。（关联：构造器是虚拟机视角下的< init >()）\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"若该类具有父类，JVM会保证子类的< clinit >()执行前，父类的< clinit >()已经执行完毕。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"虚拟机必须保证一个类的< clinit >()方法在多线程下被同步加锁。\")])])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_3-种类\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-种类\"}},[s._v(\"#\")]),s._v(\" 3：种类\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"67%\"},attrs:{src:t(1498),alt:\"image-20220625174835125\"}}),s._v(\" \"),a(\"p\",[s._v(\"在jvm类加载过程中,有一步叫做加载的流程\")]),s._v(\" \"),a(\"p\",[s._v(\"加载 : 根据类的全限定名获取到其定义的二进制字节流,并将其加载到内存中. 此时需要借助类加载器来帮助完成\")]),s._v(\" \"),a(\"p\",[s._v(\"全限定名 : 包名 + 类名\")]),s._v(\" \"),a(\"p\",[s._v(\"类加载器分为4类 :\")]),s._v(\" \"),a(\"p\",[s._v(\"%JAVA_HOME% : 为JDK设置的环境变量路径. 如环境变量里设置了%java_home%=C:\\\\jdk1.8.0\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"Bootstrap Classloader  :  启动类加载器,用来加载 %JAVA_HOME%/jre/lib 下的, 如 rt.jar中的class文件 或者 xbootclasspath选项指定            的jar包\")]),s._v(\" \"),a(\"li\",[s._v(\"Extension Classloader :   扩展类加载器 , 用来加载 %JAVA_HOME%/jre/ext 中的class文件 或者 -Djava.ext.dirs指定目录下的jar包\")]),s._v(\" \"),a(\"li\",[s._v(\"Application Classloader : 应用类加载器 , 用来加载classpath下的class文件\")]),s._v(\" \"),a(\"li\",[s._v(\"Custom Classloader : 用户自定义类加载器,用来加载自定义内容.此加载器需要用户自己继承Classloader类\")])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"四-双亲委派机制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四-双亲委派机制\"}},[s._v(\"#\")]),s._v(\" 四：双亲委派机制\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[s._v(\"java虚拟机对class文件采用的是按需加载的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"JVM支持两种类型的类加载器，分别是引导类加载器（Bootstrap Classloader），自定义类加载器（Userdefined Classloader）。\")]),s._v(\" \"),a(\"p\",[s._v(\"从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有继承自Classloader的加载器定义为自定义加载器。\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"67%\"},attrs:{src:t(1499),alt:\"image-20220625195838857\"}})])]),s._v(\" \"),a(\"img\",{attrs:{src:t(1500),alt:\"image-20220625195905386\"}}),s._v(\" \"),a(\"h3\",{attrs:{id:\"_1-引导类加载器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-引导类加载器\"}},[s._v(\"#\")]),s._v(\" 1：引导类加载器\")]),s._v(\" \"),a(\"p\",[s._v(\"启动类加载器（引导类加载器，Bootstrap ClassLoader）\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"这个类加载器是使用C/C++语言实现的，嵌套在JVM内部。\")]),s._v(\" \"),a(\"li\",[s._v(\"它用来加载Java的核心库（JAVA_HOME/jre/lib/rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类\")]),s._v(\" \"),a(\"li\",[s._v(\"并不继承自ava.lang.ClassLoader，没有父加载器。\")]),s._v(\" \"),a(\"li\",[s._v(\"加载扩展类和应用程序类加载器，并指定为他们的父类加载器。\")]),s._v(\" \"),a(\"li\",[s._v(\"出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类\")])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_2-扩展类加载器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-扩展类加载器\"}},[s._v(\"#\")]),s._v(\" 2：扩展类加载器\")]),s._v(\" \"),a(\"p\",[s._v(\"（Extension ClassLoader）\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。\")]),s._v(\" \"),a(\"li\",[s._v(\"派生于ClassLoader类\")]),s._v(\" \"),a(\"li\",[s._v(\"父类加载器为启动类加载器\")]),s._v(\" \"),a(\"li\",[s._v(\"从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/1ib/ext子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载\")])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_3-应用类加载器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-应用类加载器\"}},[s._v(\"#\")]),s._v(\" 3：应用类加载器\")]),s._v(\" \"),a(\"p\",[s._v(\"（系统类加载器，AppClassLoader）\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"java语言编写，由sun.misc.LaunchersAppClassLoader实现\")]),s._v(\" \"),a(\"li\",[s._v(\"派生于ClassLoader类\")]),s._v(\" \"),a(\"li\",[s._v(\"父类加载器为扩展类加载器\")]),s._v(\" \"),a(\"li\",[s._v(\"它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库\")]),s._v(\" \"),a(\"li\",[s._v(\"该加载器是用户编写的程序默认的类加载器，一般来说，Java应用的类都是由它来完成加载\")]),s._v(\" \"),a(\"li\",[s._v(\"通过ClassLoader#getSystemclassLoader() 方法可以获取到该类加载器\")])]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_4-为什么要用双亲委派机制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-为什么要用双亲委派机制\"}},[s._v(\"#\")]),s._v(\" 4：为什么要用双亲委派机制？\")]),s._v(\" \"),a(\"p\",[s._v(\"优势\\n● 避免类的重复加载\\n● 保护程序安全，防止核心API被随意篡改\\n○ 自定义类：java.lang.String\\n○ 自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_5-双亲委派机制工作原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-双亲委派机制工作原理\"}},[s._v(\"#\")]),s._v(\" 5：双亲委派机制工作原理\")]),s._v(\" \"),a(\"p\",[s._v(\"1）如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是先把这个请求委托给父类的加载器去执行；\\n2）如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；\\n3）如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1501),alt:\"image-20220625200346854\"}}),s._v(\" \"),a(\"h3\",{attrs:{id:\"_6-用户自定义类加载器实现步骤\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-用户自定义类加载器实现步骤\"}},[s._v(\"#\")]),s._v(\" 6：用户自定义类加载器实现步骤\")]),s._v(\" \"),a(\"p\",[s._v(\"1.开发人员可以通过继承抽象类java.lang.ClassLoader类的方式，实现 自己的类加载器，以满足一些特殊的需求\\n2. 在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写loadClass()方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖loadClass()方法，而是建议把自定义的类加载逻辑写在findClass()方法中\\n3. 在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass()方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。\")]),s._v(\" \"),a(\"h2\",{attrs:{id:\"五-程序计数器-pc-register\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五-程序计数器-pc-register\"}},[s._v(\"#\")]),s._v(\" 五：程序计数器(PC Register)\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_1-概念\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-概念\"}},[s._v(\"#\")]),s._v(\" 1：\"),a(\"strong\",[s._v(\"概念\")])]),s._v(\" \"),a(\"p\",[s._v(\"​\\t\\tJVM中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_2-作用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-作用\"}},[s._v(\"#\")]),s._v(\" 2：\"),a(\"strong\",[s._v(\"作用\")])]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[s._v(\"PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"使用PC寄存器存储字节码指令地址有什么用呢？为什么使用PC寄存器记录当前线程的执行地址呢？\\n● CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。\")]),s._v(\" \"),a(\"p\",[s._v(\"JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。\")])]),s._v(\" \"),a(\"li\",[a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1502),alt:\"image-20220625220842755\"}})])]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"67%\"},attrs:{src:t(1503),alt:\"image-20220625220959048\"}}),s._v(\" \"),a(\"h3\",{attrs:{id:\"_3-常见问题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-常见问题\"}},[s._v(\"#\")]),s._v(\" 3：常见问题\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"67%\"},attrs:{src:t(1504),alt:\"image-20220625221534369\"}}),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"67%\"},attrs:{src:t(1505),alt:\"image-20220625221653566\"}}),s._v(\" \"),a(\"h2\",{attrs:{id:\"六-运行时数据区\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六-运行时数据区\"}},[s._v(\"#\")]),s._v(\" 六：运行时数据区\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"六-一-虚拟机栈\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六-一-虚拟机栈\"}},[s._v(\"#\")]),s._v(\" 六.一：虚拟机栈\")]),s._v(\" \"),a(\"p\",[s._v(\"​\\t\\t由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于\"),a(\"a\",{attrs:{href:\"https://so.csdn.net/so/search?q=%E5%AF%84%E5%AD%98%E5%99%A8&spm=1001.2101.3001.7020\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"寄存器\"),a(\"OutboundLink\")],1),s._v(\"的。 优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。(和第一章的jvm简介相对应)\")]),s._v(\" \"),a(\"p\",[s._v(\"栈和堆\")]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"栈是运行时的单位，而堆是存储的单位\")])]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。\")]),s._v(\" \"),a(\"li\",[s._v(\"堆解决的是数据存储的问题，即数据怎么放，放哪里\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1506),alt:\"image-20220626102833872\"}})]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_1-java虚拟机栈是什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-java虚拟机栈是什么\"}},[s._v(\"#\")]),s._v(\" 1：Java虚拟机栈是什么\")]),s._v(\" \"),a(\"p\",[s._v(\"Java虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的Java方法调用。\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1507),alt:\"image-20220626103134910\"}}),s._v(\" \"),a(\"h4\",{attrs:{id:\"_2-生命周期\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-生命周期\"}},[s._v(\"#\")]),s._v(\" 2：生命周期\")]),s._v(\" \"),a(\"p\",[s._v(\"虚拟机栈是线程私有的，生命周期和线程一致，也就是线程结束了，该虚拟机栈也销毁了\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_3-作用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-作用\"}},[s._v(\"#\")]),s._v(\" 3：作用\")]),s._v(\" \"),a(\"p\",[s._v(\"主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。\")]),s._v(\" \"),a(\"blockquote\",[a(\"p\",[s._v(\"局部变量，它是相比于成员变量来说的（或属性）\\n基本数据类型变量 VS 引用类型变量（类、数组、接口）\")])]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_4-特点\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-特点\"}},[s._v(\"#\")]),s._v(\" 4：特点\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"67%\"},attrs:{src:t(1508),alt:\"image-20220626104521931\"}}),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器。\")]),s._v(\" \"),a(\"li\",[s._v(\"JVM直接对Java栈的操作只有两个：\\n每个方法执行，伴随着进栈（入栈、压栈）\\n执行结束后的出栈工作\")]),s._v(\" \"),a(\"li\",[s._v(\"对于栈来说不存在垃圾回收问题（栈存在溢出的情况）\")])]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_5-对比队列\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-对比队列\"}},[s._v(\"#\")]),s._v(\" 5：对比队列\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"栈是先进后出/后进先出\")]),s._v(\" \"),a(\"li\",[s._v(\"队列是先进先出\")])]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_6-开发中遇到哪些异常\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-开发中遇到哪些异常\"}},[s._v(\"#\")]),s._v(\" 6：开发中遇到哪些异常？\")]),s._v(\" \"),a(\"p\",[s._v(\"栈中可能出现的异常\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"Java 虚拟机规范允许Java栈的大小是动态的或者是固定不变的。\")]),s._v(\" \"),a(\"li\",[s._v(\"如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个StackoverflowError异常。\")]),s._v(\" \"),a(\"li\",[s._v(\"如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个\\noutofMemoryError 异常。\")])]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"67%\"},attrs:{src:t(1509),alt:\"image-20220626103257559\"}}),s._v(\" \"),a(\"h4\",{attrs:{id:\"_7-设置栈内存大小\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-设置栈内存大小\"}},[s._v(\"#\")]),s._v(\" 7：设置栈内存大小\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-xml line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[a(\"code\",[s._v(\"-Xss1m\\n-Xss1k\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"p\",[s._v(\"参数 -Xss选项来设置线程的最大栈空间\\n关于idea：(Run -> Edit Configurations… ->VM options: )\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_8-栈的存储单位\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-栈的存储单位\"}},[s._v(\"#\")]),s._v(\" 8：栈的存储单位\")]),s._v(\" \"),a(\"h5\",{attrs:{id:\"_1-栈中存储什么\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-栈中存储什么\"}},[s._v(\"#\")]),s._v(\" （1）：栈中存储什么？\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"每个线程都有自己的栈，栈中的数据都是以栈帧（Stack Frame）的格式存在。\")]),s._v(\" \"),a(\"li\",[s._v(\"在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）。\")]),s._v(\" \"),a(\"li\",[s._v(\"栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-xml line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[a(\"code\",[s._v(\"OOP的基本概念：类和对象\\n类中基本结构：field（属性、字段、域）、method\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"h5\",{attrs:{id:\"_2-栈运行原理1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-栈运行原理1\"}},[s._v(\"#\")]),s._v(\" （2）：栈运行原理1\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"JVM直接对Java栈的操作只有两个，就是对栈帧的压栈和出栈，遵循“先进后出”/“后进先出”原则。\")]),s._v(\" \"),a(\"li\",[s._v(\"在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为当前栈帧（Current Frame），与当前栈帧相对应的方法就是当前方法（Current Method），定义这个方法的类就是当前类（Current Class）。\")]),s._v(\" \"),a(\"li\",[s._v(\"执行引擎运行的所有字节码指令只针对当前栈帧进行操作。\")]),s._v(\" \"),a(\"li\",[s._v(\"如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。\")])]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1510),alt:\"image-20220626111833261\"}}),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"StackFrameTest\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"main结束\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"方法1的开始\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method02\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"方法1的结束\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" i\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method02\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"方法2的开始\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method03\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"方法2的结束\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" i\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"private\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"double\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"method03\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"方法3的开始\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"double\")]),s._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"30.01\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),s._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"方法3的结束\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),s._v(\" i\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"//方法1的开始\")]),s._v(\"\\n方法\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\"的开始\\n方法\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\"的开始\\n方法\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"3\")]),s._v(\"的结束\\n方法\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"2\")]),s._v(\"的结束\\n方法\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),s._v(\"的结束\\nmain结束\\n\\n\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"31\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"32\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"33\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"34\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"35\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"36\")]),a(\"br\")])]),a(\"h5\",{attrs:{id:\"_3-栈运行原理2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-栈运行原理2\"}},[s._v(\"#\")]),s._v(\" （3）：栈运行原理2\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧。\")]),s._v(\" \"),a(\"li\",[s._v(\"如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。\")]),s._v(\" \"),a(\"li\",[s._v(\"Java方法有两种返回函数的方式，\"),a(\"strong\",[s._v(\"一种是正常的函数返回，使用return指令；另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出。(默认是return；)\")])])]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_9-栈帧的内部结构\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-栈帧的内部结构\"}},[s._v(\"#\")]),s._v(\" 9：栈帧的内部结构\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"局部变量表（Local Variables）\")]),s._v(\" \"),a(\"li\",[s._v(\"操作数栈（operand Stack）（或表达式栈）\")]),s._v(\" \"),a(\"li\",[s._v(\"动态链接（DynamicLinking）（或指向运行时常量池的方法引用）\")]),s._v(\" \"),a(\"li\",[s._v(\"方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）\")]),s._v(\" \"),a(\"li\",[s._v(\"一些附加信息\\n(局部变量表和操作数栈主要影响栈帧的大小)\")]),s._v(\" \"),a(\"li\",[a(\"img\",{attrs:{src:t(1511),alt:\"image-20220626112009847\"}})])]),s._v(\" \"),a(\"p\",[s._v(\"并行每个线程下的栈都是私有的，因此每个线程都有自己各自的栈，并且每个栈里面都有很多栈帧，栈帧的大小主要由局部变量表和操作数栈决定的\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1512),alt:\"image-20220626112030600\"}}),s._v(\" \"),a(\"h3\",{attrs:{id:\"六-二-局部变量表\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六-二-局部变量表\"}},[s._v(\"#\")]),s._v(\" 六.二：局部变量表\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_1-定义\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-定义\"}},[s._v(\"#\")]),s._v(\" 1：定义\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"局部变量表：Local Variables，被称之为局部变量数组或本地变量表\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量\")]),s._v(\"，这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型。\")]),s._v(\" \"),a(\"li\",[s._v(\"由于局部变量表是建立在线程的栈上，\"),a(\"strong\",[s._v(\"是线程的私有数据，因此不存在数据安全问题\")])]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"局部变量表所需的容量大小是在编译期确定下来的\")]),s._v(\"，并保存在方法的Code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的。\")]),s._v(\" \"),a(\"li\",[s._v(\"方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"局部变量表中的变量只在当前方法调用中有效\")]),s._v(\"。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。\"),a(\"strong\",[s._v(\"当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。\")])])]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"class\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"LocalVariablesTest\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"static\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"main\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"String\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" args\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Date\")]),s._v(\" date \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"new\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[s._v(\"Date\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" num \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"return\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\")])]),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1513),alt:\"image-20220626114456095\"}}),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1514),alt:\"image-20220626114518047\"}}),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1515),alt:\"image-20220626114530374\"}}),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1516),alt:\"image-20220626114542116\"}}),s._v(\" \"),a(\"h4\",{attrs:{id:\"_2-关于slot的理解\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-关于slot的理解\"}},[s._v(\"#\")]),s._v(\" 2：关于Slot的理解\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"参数值的存放总是在局部变量数组的index0开始，到数组长度-1的索引结束。\")]),s._v(\" \"),a(\"li\",[s._v(\"局部变量表，最基本的存储单元是Slot（变量槽）\")]),s._v(\" \"),a(\"li\",[s._v(\"局部变量表中存放编译期可知的各种基本数据类型（8种），引用类型（reference），returnAddress类型的变量。\")]),s._v(\" \"),a(\"li\",[s._v(\"在局部变量表里，32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot。\")])]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"byte\")]),s._v(\"、\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"short\")]),s._v(\"、\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"char\")]),s._v(\" 在存储前被转换为\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\"，\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"boolean\")]),s._v(\"也被转换为\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\"，\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"表示\"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"false\")]),s._v(\"，非\"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),s._v(\"表示\"),a(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"true\")]),s._v(\"。\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"long\")]),s._v(\"和\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"double\")]),s._v(\"则占据两个slot。\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"ul\",[a(\"li\",[s._v(\"JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值\")]),s._v(\" \"),a(\"li\",[s._v(\"当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会\"),a(\"strong\",[s._v(\"按照顺序\")]),s._v(\"被复制到局部变量表中的每一个slot上\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可。（比如：访问long或double类型变量）\")])]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"如果当前帧是由构造方法或者实例方法创建的，那么该对象引用this将会存放在index为0的slot处，其余的参数按照参数表顺序继续排列。(static方法不能调用this，因为this没办法存在当前方法的局部变量表中)\")])])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1517),alt:\"image-20220626160644790\"}})]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_3-slot的重复利用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-slot的重复利用\"}},[s._v(\"#\")]),s._v(\" 3：Slot的重复利用\")]),s._v(\" \"),a(\"p\",[s._v(\"**栈帧中的局部变量表中的槽位是可以重用的，**如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变就很有可能会复用过期局部变量的槽位，\"),a(\"strong\",[s._v(\"从而达到节省资源的目的\")]),s._v(\"。\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[s._v(\"    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"abc5\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" a \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n            \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" b \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"0\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n            b \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" a \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" c \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" a \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),a(\"br\")])]),a(\"p\",[a(\"img\",{attrs:{src:t(1518),alt:\"image-20220626160827986\"}})]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1519),alt:\"image-20220626161615079\"}}),s._v(\" \"),a(\"h4\",{attrs:{id:\"_4-静态变量与局部变量的对比\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-静态变量与局部变量的对比\"}},[s._v(\"#\")]),s._v(\" 4：静态变量与局部变量的对比\")]),s._v(\" \"),a(\"h5\",{attrs:{id:\"_1-变量的分类\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-变量的分类\"}},[s._v(\"#\")]),s._v(\" ①：变量的分类\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[s._v(\"按数据类型分：  基本数据类型、引用数据类型\")])]),s._v(\" \"),a(\"li\",[a(\"p\",[s._v(\"按类中声明的位置分：成员变量（类变量，实例变量）、局部变量\\n– 类变量：linking的paper阶段，给类变量默认赋值，init阶段给类变量显示赋值即静态代码块\\n– 实例变量：随着对象创建，会在堆空间中分配实例变量空间，并进行默认赋值\\n– 局部变量：在使用前必须进行显式赋值，不然编译不通过。\")])])]),s._v(\" \"),a(\"h5\",{attrs:{id:\"_2-补充说明\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-补充说明\"}},[s._v(\"#\")]),s._v(\" ②：补充说明\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[a(\"strong\",[s._v(\"在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。\")])]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。\")])]),s._v(\" \"),a(\"li\",[a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1520),alt:\"image-20220626163109893\"}})])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1521),alt:\"image-20220626163004244\"}})]),s._v(\" \"),a(\"h3\",{attrs:{id:\"六-三-操作数栈\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六-三-操作数栈\"}},[s._v(\"#\")]),s._v(\" 六.三：操作数栈\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_1-概念-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-概念-2\"}},[s._v(\"#\")]),s._v(\" 1：概念\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"每一个独立的栈帧除了包含局部变量表以外，还包含一个后进先出（Last - In - First -Out）的 操作数栈，也可以称之为表达式栈（Expression Stack）\")]),s._v(\" \"),a(\"li\",[s._v(\"操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈（push）和 出栈（pop）\")])]),s._v(\" \"),a(\"p\",[s._v(\"某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈\\n比如：执行复制、交换、求和等操作\")]),s._v(\" \"),a(\"img\",{staticStyle:{zoom:\"80%\"},attrs:{src:t(1522),alt:\"image-20220626165411749\"}}),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。\")]),s._v(\" \"),a(\"li\",[s._v(\"操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的。\")])]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"这个时候数组是有长度的，因为数组一旦创建，那么就是不可变的\")])]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的Code属性中，为maxstack的值。\")]),s._v(\" \"),a(\"li\",[s._v(\"栈中的任何一个元素都是可以任意的Java数据类型\\n– 32bit的类型占用一个栈单位深度\\n– 64bit的类型占用两个栈单位深度\")]),s._v(\" \"),a(\"li\",[s._v(\"操作数栈并非采用访问索引的方式来进行数据访问的，而是只能通过标准的入栈和出栈操作来完成一次数据访问\")]),s._v(\" \"),a(\"li\",[a(\"strong\",[s._v(\"如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新PC寄存器中下一条需要执行的字节码指令。\")])]),s._v(\" \"),a(\"li\",[s._v(\"操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。|\")]),s._v(\" \"),a(\"li\",[s._v(\"另外，\"),a(\"strong\",[s._v(\"我们说Java虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是操作数栈。\")])])]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_2-代码追踪\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-代码追踪\"}},[s._v(\"#\")]),s._v(\" 2：代码追踪\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-java line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"public\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"void\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"testAddOperation\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\")\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"{\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"byte\")]),s._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"15\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" j \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"8\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[s._v(\"int\")]),s._v(\" k \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" i \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"+\")]),s._v(\" j\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\";\")]),s._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"}\")]),s._v(\"\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),a(\"br\")])]),a(\"img\",{staticStyle:{zoom:\"67%\"},attrs:{src:t(1523),alt:\"image-20220626165858998\"}}),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"byte、short、char、boolean 内部都是使用int型来进行保存的\")]),s._v(\" \"),a(\"li\",[s._v(\"从上面的代码我们可以知道，我们都是通过bipush对操作数 15 和 8进行入栈操作\")]),s._v(\" \"),a(\"li\",[s._v(\"同时使用的是 iadd方法进行相加操作，i -> 代表的就是 int，也就是int类型的加法操作\")])]),s._v(\" \"),a(\"p\",[a(\"strong\",[s._v(\"为什么图片中的局部变量表不是从0开始的呢？\")])]),s._v(\" \"),a(\"p\",[s._v(\"其实局部变量表也是从0开始的，但是因为0号位置存储的是this指针，所以说就直接省略了~\")]),s._v(\" \"),a(\"div\",{staticClass:\"language-xml line-numbers-mode\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[a(\"code\",[s._v(\"提醒：有参数时，参数插入slot的顺序是在this之后，在局部变量之前\\n为什么字节码会由3跳成5\\n\")])]),s._v(\" \"),a(\"div\",{staticClass:\"line-numbers-wrapper\"},[a(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),a(\"br\"),a(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),a(\"br\")])]),a(\"p\",[a(\"strong\",[s._v(\"以下操作默认最后由字节码解释器改变pc寄存器的指向\")])]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"首先执行第一条语句，PC=0，也就是指令地址为0，然后使用bipush让操作数15入栈。\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1524),alt:\"image-20220626172251068\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"执行完后，让PC =2，字节码指令就是将操作数栈的元素存储到局部变量表slot1的位置，我们可以看到局部变量表的已经增加了一个元素\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1525),alt:\"image-20220626172317010\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"PC=3，让8压栈操作数栈\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1526),alt:\"image-20220626172334668\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"PC=5，8出栈操作数栈，把该元素存储到局部变量表slot2的位置\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1527),alt:\"image-20220626172351365\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"PC=6，操作数栈读取局部变量表的slot1位置，并且把该元素压栈操作数栈\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1528),alt:\"image-20220626172406556\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"PC=7，操作数栈读取局部变量表的slot2位置，并且把该元素压栈操作数栈\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1529),alt:\"image-20220626172422439\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"PC=8,相加处理，相加结果压栈操作数栈\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1530),alt:\"image-20220626172436722\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"PC=9,相加结果出栈操作数栈，把该元素存储到局部变量表slot3的位置\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1531),alt:\"image-20220626172451937\"}})]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"PC=10,退出方法\")])]),s._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:t(1532),alt:\"image-20220626172506516\"}})]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_3-i-和-i的区别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-i-和-i的区别\"}},[s._v(\"#\")]),s._v(\" 3：i++和++i的区别\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"栈顶缓存技术\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#栈顶缓存技术\"}},[s._v(\"#\")]),s._v(\" 栈顶缓存技术\")]),s._v(\" \"),a(\"ul\",[a(\"li\",[s._v(\"前面提过，基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（instruction dispatch）次数和内存读/写次数。\")]),s._v(\" \"),a(\"li\",[s._v(\"由于操作数是存储在内存中的，因此频繁地执行内存读/写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM的设计者们提出了\"),a(\"strong\",[s._v(\"栈顶缓存（Tos，Top-of-Stack Cashing）技术，将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率。\")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}